//PROBLEMA 1 STEFANO IACCARINO

#include <bits/stdc++.h>

using namespace std;

void merge(int a[], int p, int q, int r) 
{ 
    int i; 
    int j;
    int k;
    int n1 = q - p + 1; 
    int n2 =  r - q; 
   
     
    int L[n1];  //temp array
     
    int R[n2]; 
   
     
    for (i = 0; i < n1; i++) // copying data to temp arrays
        L[i] = a[p + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = a[q+1+j]; 
   
     
    i = 0; 
    j = 0; 
    k = p; 
    while (i < n1 && j < n2){ 
        if (L[i] <= R[j]){ 
            a[k] = L[i]; 
            i++; 
        }else{ 
            a[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
    while (i < n1){ 
        a[k] = L[i]; 
        i++; 
        k++; 
    } 
    while (j < n2){ 
        a[k] = R[j]; 
        j++; 
        k++; 
    } 
}

void mergeSort(int a[], int p, int r){ 
    if (p < r){ 
         
        int q = p + (r - p)/2; 
   
         
        mergeSort(a, p, q); 
        mergeSort(a, q+1, r); 
   
        merge(a, p, q, r); 
    } 
}   
 
int count_num(int a[], int p, int r, int k){
   int count = 0;
   mergeSort(a,0,r-1);
   for(int i = 0; i < r; i++){
       if(a[i] == k){
           count++;
       }
   }
   return count;
}

int main(){
    int a[100];
    int n,k,test_cases,count;
    
    cin >> test_cases;
    
    while(test_cases--){
        cin >> k;
        cin.ignore();
        cin >> n;
        cin.ignore();
        for(int i = 0; i < n; i++){
            cin >> a[i];
            cin.ignore();
        }
        count = count_num(a,0,n-1,k);
        cout << count << endl;
    }

    return 0;
}

//COMPLESSITA' O(nlogn)


//PROBLEMA 2 STEFANO IACCARINO

#include <bits/stdc++.h>

using namespace std;
 
bool is_a_solution(int p){
    int root = sqrt(p);
    if (p == 1)
        return false;
 
    for (int i = 2; i <= root; i++)
        if (p % i == 0)
            return false;
}

void solve(int sum, int n, int s, int index, vector<int> &solutions, vector<int> &prime){
    if (sum == s && solutions.size() == n){
        for(int i = 0; i < n; i++){
            cout << solutions[i] << " ";
        }
        return;
    }

    if (sum > s || index == prime.size())
        return;
 
    solutions.push_back(prime[index]);
    solve(sum+prime[index], n, s, index+1,solutions,prime);
    solutions.pop_back();
    
    solve(sum, n, s, index+1,solutions,prime);
}

int main(){
    vector<int> prime_numbers;
    vector<int> solutions;
    

    return 0;
}

//COMPLESSITA' O(n!)
