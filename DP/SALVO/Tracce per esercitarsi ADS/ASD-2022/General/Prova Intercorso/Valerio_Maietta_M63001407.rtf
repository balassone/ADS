{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15140\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 PROBLEMA 1\
\
#include <iostream>\
using namespace std;\
\
int contaOccorrenze(int arr[], int l, int h, int k)\
\{\
	if ((l > h) || (l == h && arr[l] != k)) //se l'array non \'e8 valido o se non contiene k\
		return 0;\
\
	if (l == h && arr[l] == k) //se contiene un solo elemento ed \'e8 uguale a k\
		return 1;\
\
    //divide l'array in due parti e trova il numero di occorrenze di k in entrambe le parti\
	return contaOccorrenze(arr, l, (l + h) / 2, k) + \
           contaOccorrenze(arr, 1 + (l + h) / 2, h, k);\
\}\
\
int main()\
\{\
	int t;\
	cin>>t;\
	\
	\
	while(t--)\{\
	    int k;\
	    cin>>k;\
	    \
	    int dim;\
	    cin>>dim;\
	    \
	    int arr[dim];\
	    for(int i=0; i<dim; i++)\{\
	        cin>>arr[i];\
	    \}\
	    \
	    int n = sizeof(arr) / sizeof(int);\
	    \
	    cout << contaOccorrenze(arr, 0, n - 1, k)<<endl;\
	\}\
\
	return 0;\
\}\
	//La complessit\'e0 \'e8 O(NlogN)\
\
\
\
PROBLEMA 2\
\
#include <bits/stdc++.h>\
using namespace std;\
\
// Determina se un numero \'e8 primo in O(n)\
bool isNumPrimo(int n) \{\
	for (int i = n-1; i > 1; i--)\
		if (n%i == 0)\
			return false;\
	return true;\
\}\
\
// Trova la sequenza di numeri primi > P e <= S in O(n*(S-P))\
void seqNumPrimi(int P, int S, int c[], int *nc) \{\
	*nc = 0;\
\
	for (int i = P+1; i <= S; i++)\
		if (isNumPrimo(i)) \{\
			c[*nc] = i;\
			(*nc)++;\
		\}\
\}\
\
void backtrack(int P, int S, int N, int seq[], int sommaTemp, int i) \{\
\
	// Caso base\
	// Arrivato a sequenza di N elementi, fermati.\
	// Se la somma \'e8 S, la soluzione \'e8 corretta, altrimenti \'e8 errata\
	if (i == N) \{\
		if (sommaTemp == S) \{		// Successo\
			for (int h = 0; h < N; ++h) \{\
				cout << seq[h] << " ";\
			\}\
			cout << endl;\
		\}\
\
		else return; // Fallimento\
	\}\
\
	// Caso ricorsivo\
	// Trova la sequenza di numeri primi > dell'ultimo inserito seq[i-1] e <= S\
	int choices[S-P];\
	int nc;\
\
	if (i == 0)	// Al passo 0, non esiste seq[i-1]\
		seqNumPrimi(P, S, choices, &nc);\
	else		// Questo serve a scegliere una sequenza strettamente crescente di numeri primi\
		seqNumPrimi(seq[i-1], S, choices, &nc);\
\
	// Itera sui possibili numeri primi da inserire come scelta seq[i]\
	for (int k = 0; k < nc; k++) \{\
		seq[i] = choices[k];\
\
		backtrack(P, S, N, seq, sommaTemp + choices[k], i+1);\
	\}\
\}\
\
int main() \{\
	int t, S, N, P;\
	int seq[1000];\
\
	cin >> t;\
\
	for (int k = 1; k <= t; k++) \{\
		cin >> S;\
        cin >> N;\
        cin >> P;\
\
		cout << "CASO DI TEST " << k << endl;\
		backtrack(P, S, N, seq, 0, 0);\
	\}\
	return 0;\
\}\
\
// La complessit\'e0 \'e8 O(S^(N+2)) = O(S^N)}