//GIORDANO SIMONE 
//AVVERTIMENTO: POTREBBE RISULTARE NECESSARIO PER LA COMPILAZIONE UTILIZZARE IL FLAG -std=c++11

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


//Algoritmo di heap sort in nlogn di un vettore di interi
void heap_sort(vector<int> &v){
    make_heap(v.begin(), v.end());
    sort_heap(v.begin(), v.end());
}


int count_occurrences_util(std::vector<int> &input, int target, int start, int end) {

    if (start > end) return 0;
    if (start == end) return input[start] == target ? 1 : 0;
    int mid = (start + end) / 2;
    if (input[mid] == target) {
        //Controllo i numeri adiacenti a quello che ho trovato per contare le occorrenze
        int left = count_occurrences_util(input, target, start, mid - 1);
        int right = count_occurrences_util(input, target, mid + 1, end);
        return left + right + 1;
    } else if (input[mid] > target) {
        return count_occurrences_util(input, target, start, mid - 1);
    } else {
        return count_occurrences_util(input, target, mid + 1, end);
    }
}

int count_occurrences(std::vector<int> &input, int target) {
    //Ordino il vettore per far funzionare la ricerca binaria
    heap_sort(input);
    return count_occurrences_util(input, target, 0, input.size() - 1);
}

bool is_prime(int n)
{
    if (n == 2)
        return true;
    if (n % 2 == 0)
        return false;
    for (int i = 3; i * i <= n; i += 2)
    {
        if (n % i == 0)
            return false;
    }
    return true;
}

// Algoritmo di backtracking che trova una sequenza di n_elem che sommati danno il target
// Gli elementi devono essere strettamente maggiori di un numero primo e devono essere primi
void find_sum_backtracking(int prime, int target_sum, int curr_sum, int count, std::vector<int> &curr_solution, std::vector<std::vector<int>> &solutions)
{

    if (curr_sum == target_sum)
    {
        solutions.push_back(curr_solution);
        return;
    }

    if (curr_sum > target_sum)
        return;

    for (int i = prime + 1; i <= target_sum; i++)
    {
        if (is_prime(i))
        {
            curr_solution.push_back(i);
            find_sum_backtracking(i, target_sum, curr_sum + i, count + 1, curr_solution, solutions);
            curr_solution.pop_back();
        }
    }
}
std::vector<std::vector<int>> find_sum(int prime, int target_sum, int count)
{
    std::vector<std::vector<int>> solutions;
    std::vector<int> curr_solution;
    find_sum_backtracking(prime, target_sum, 0, count, curr_solution, solutions);
    return solutions;
}

void occorrenze_test() {
    //Leggo il numero di test case
    cout << "CONTA OCCORRENZE" << endl;
    int n_cases;
    cin >> n_cases;
    while(n_cases--) {
        //Il primo numero indica il target, il secondo la dimensione, i restanti sono gli elementi del vettore
        int target;
        int input_size;
        cin >> target >> input_size;
        vector<int> input(input_size);
        for (int i = 0; i < input_size; i++) {
            cin >> input[i];
        }
        cout << "Il numero di occorenze di " << target << " è: " << count_occurrences(input, target) << endl;
    }
}
void trova_somma_test() {
    // Leggo il numero di test case
    cout << "SOMMA DI NUMERI" << endl;
    int n_cases;
    cin >> n_cases;
    int i = 1;
    while (n_cases--)
    {
        // Il primo numero indica la somma, il secondo il numero di elementi, il terzo il numero primo
        int target_sum;
        int count;
        int prime;
        cin >> target_sum >> count >> prime;
        std::vector<std::vector<int>> solutions = find_sum(prime, target_sum, count);
        cout << "CASO DI TEST " << i << endl;
        for (int i = 0; i < solutions.size(); i++)
        {
            for (int j = 0; j < solutions[i].size(); j++)
            {
                cout << solutions[i][j] << " ";
            }
            cout << endl;
        }
        ++i;
    }
}


int main() {
    occorrenze_test();
    trova_somma_test();
    return 0;
}



//COMPLESSITA' TEMPORALE di count_occurrences: O(nlogn) per ordinare il vettore, O(logn) per la ricerca binaria, quindi O(nlogn) in totale
//COMPLESSITA' TEMPORALE di find_sum_backtracking: 
// is_prime funziona in O(n). Per ogni numero primo che trovo effettuo una ramificazione considerandolo come parte della soluzione
// e una considerandolo come non parte della soluzione. Ad ogni chiamata successiva si itera su tutti i numeri primi maggiori di quello
// considerato. Quindi la complessità è O(m * n!) dove n è il numero di numeri primi minori del target e maggiori del numero primo
// indicato e m il più grande numero primo <= della somma target