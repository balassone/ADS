//esercizio 1
#include <iostream>


using std::cout;
using std::cin;
using std::endl;
/*
 
    se il vettore è ordinato si cercando mediante due ricerchi binare l'elemento più a destra e poi quello più a sinistra
    (complessità O(logn))
    e si fruttanno gli indici per capire il numero di elementi.
	Se il vettore non è odinato possiamo usare il seguente approccio divide et impera che però porta ad una complessità lineare
avremo infatti una successiote T(n)= 2T(n/2)+O(1).

int conta(int key, const int* array, int left,int right){



    if(left<right){

        int mid = (l+r)/2;

        return conta(key,array,lelft,mid) + conta(key,array,mid+1,right);

    }



    if(arr[l] == key) return 1;

    return 0;
}


*/


template<typename T>
int binarySearchRight(const T* array, int size, T val){
    int l=0;
    int r=size-1;
    int index = -1;
    while(l<=r){
        int mid = l+(r-l)/2;
        if(val <array[mid])   r=mid-1;
        else if(val > array[mid]) l = mid+1;
        else{
            index = mid;
            l=mid+1;  //se vogliamo l'elemento più a sinistra basta porre r=mid-1;
        }
    }
    return index;
}

template<typename T>
int binarySearchLeft(const T* array, int size, T val){
    int l=0;
    int r=size-1;
    int index = -1;
    while(l<=r){
        int mid = l+(r-l)/2;
        if(val <array[mid])   r=mid-1;
        else if(val > array[mid]) l = mid+1;
        else{
            index = mid;
            r=mid-1;  //se vogliamo l'elemento più a sinistra basta porre r=mid-1;
        }
    }
    return index;
}


int main(){
    int test;
    int k;
    int n;
    int* array = nullptr;


    cin>>test;
    while(test--){
        cin>>k >> n;
        array = new int[n];
        for(int i=0 ; i < n ; i++)
            cin>>array[i];


        int indexLeft = binarySearchLeft(array, n, k);
        int indexRight = binarySearchRight(array, n, k);



        if(indexRight==-1) cout << "0" << endl;
        else
            cout << indexRight-indexLeft+1<< endl;
        


        delete[] array;
    }

return 0;
}



//esercizio 2
#include <iostream>


using std::cout;
using std::cin;
using std::endl;

bool prime(int i);

void solution(int s, int n, int p);
void backtrack(int& p, const int& s, int& length, int* array, int n);
bool checkCandidate(const int& s, int i, int& length, int* array);

/*
    la crescita è esponenziale infatti per ogni possibile punto di partenza dovremmo provare a 
    inserire i restanti n-1 elementi. Questo va fatto per ogni elemento. I vincoli ci aitano a ridurre 
    la complessità. Consideriamo inoltre che ad ogni inserimento si aggiunge una complessità lineare per 
    verificare se il numero è primo e per considerare l'attuale somma parziale. 

*/


int main(){

    int p;
    int n;
    int s;
    int test;
    int i=1;

    cin>>test;
    while(test--){
        cin>> s >> n >> p;
        cout << "CASO DI TEST " << i << endl;
        solution(s, n, p);
        i++;
    }

return 0;
}

void solution(int s, int n, int p){
    int* array = new int[n];
    int length = 0;
    backtrack(p, s, length, array, n);

    delete[] array;
}

void backtrack(int& p, const int& s, int& length, int* array, int n){
    if(length==n){
        int somma=0;
        for(int i=0 ; i < n ; i++)
            somma+=array[i];
        
        if(somma==s){
            for(int i=0 ; i < n ; i++)
                cout << array[i] << " ";
            cout << endl;
        }
        return;
    }

    for(int i=p+1 ; i <= s ; i++){
        if(checkCandidate(s, i, length, array)){
            array[length]=i;
            length++;
            backtrack(i, s, length, array, n);
            length--;
        }

    }
}


bool checkCandidate(const int& s, int i, int& length, int* array){
    if(!prime(i))   return false;
    int somma=0;
    for(int j=0 ; j < length ; j++)
        somma+=array[j];
    
    if(somma+i<=s) return true;
    else    false;
}

bool prime(int i){
    for(int j=2 ; j < i ; j++){
        if(i%j==0)  return false;
    }
    return true;
}