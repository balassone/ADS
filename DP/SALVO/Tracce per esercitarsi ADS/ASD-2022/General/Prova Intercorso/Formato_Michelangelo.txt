#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void stamp(vector <int> v){
	for(int i = 0; i < v.size(); i++)
		cout<<v[i]<<' ';
	cout<<endl;
}

int BinSearch(vector <int> V, const int first, const int last, const int val, int & pos){
    
	int med, found = 0;
    
	if ((last - first) >= 0 && !found){
		
        med = (last + first) / 2;
        
		if (V[med] == val){
            pos = med;
            found = 1;
		}
		else if (V[med] < val)
		    return BinSearch(V, med + 1, last, val, pos);
		else
		    return BinSearch(V, first, med - 1, val, pos);
	}
	
    return found;

}

void occorrenze(vector <int> v, int k){
	
	sort(v.begin(), v.end()); //o(n logn)
	stamp(v);
	

	int cont = 0, find = 1, pos;
	
	while(find){								//o(n)
		find = BinSearch(v, 0, v.size(), k, pos);	//o(logn)
		if(find){
			cont++;
			v.erase(v.begin() + find);
		}
	}
	
	cout<<cont<<endl;
	stamp(v);
		
}

int main(){
	
	int T; cin >>T;
	
	int k, n, x;
	vector <int> v;
	
	while(T--){
		
		cin>>k; cin>>n;
		
		for(int i= 0; i < n; i++){
			cin>>x;
			v.push_back(x);
		}
		
		occorrenze(v, k);	
		
	}
	
	return 0;
	
}

/*

oss: per mancanza di tempo non ho potuto aggiustare il problema ma con il tc in esame non fuinziona perche trova l'elemento
nel primo posto nel vettore e induce problemi nel while--> dovrei aggiustare gli indici


la complessità totale è di o(n log n + n log n)

--->il primo n log n è dato dall'ordinamento del vettore, il quale sfrutta sort nella libreria algorithm
--->il secondo n log n è dato dalla ricerca binaria (o(log n)) la quale, complessità, va moltiplicata per
n volte cioè il caso peggiore in cui tutti gli elementi sono uguali e vengono trovati ed eliminati, si sfrutta erase della
libreria vector

*/

/******************************/

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

vector<int> set;
vector<int> primi;

void stamp(){
    for (int i = 0; i < set.size(); i++)
        cout<<set[i]<<' ';
    cout<<endl;
}

bool primo(int x){
    
    if (x == 1)
        return false;
    
	int radix = sqrt(x);

    for (int i = 2; i <= radix; i++)
        if (x % i == 0)
            return false;

    return true;
}

void somma(int sum, int N, int S, int i){
    
    //passo finale: ho ottenuto la somma in N #numeri primi
    if (sum == S && set.size() == N){
        stamp();
        return;
    }

    // se non ho concluso in maniera corretta la ricorsione e
    //ho superato S oppure ho usato tutti i numeri primi a disposizione 
    //esci senza risultato
    if (sum > S || i == primi.size())
        return;

 	//aggiungo numero primo al vettore dove ssalvo la struttura dati
    set.push_back(primi[i]);

    //chiamo ricorsione per il successivo numero primo, non posso usare lo stesso
    somma(sum + primi[i], N, S, i + 1);

    set.pop_back();	//backtracking

    //esegui la ricorsione escludendo il primo numero primo trovato
    somma(sum, N, S, i + 1);
}

void wrapped(int S, int N, int P){
    
    for(int i = P + 1; i <= S ; i++)
        if(primo(i))
            primi.push_back(i);

    if (primi.size() < N)
        return;
        
    somma(0, N, S, 0);
    
}

int main(){
	
    int T, S, N, P; cin>>T;
    
    while(T--){
    	
    	cout<<"CASO DI TEST "<<T + 1<<endl;
    	
    	cin>>S>>N>>P;
    	wrapped(S, N, P);
    	
    	primi.clear();
    	
	}
	return 0;
	
}

/*

la ricorsione prova tutte le possibili somme partendo dal primo numero primo trovato
se trovo ]#n numeri primi le possibili somme sono fino ad S n nel caso peggiore, ogni
volta che incremento la ricorsione diminuisce da n ad n-1 il numero di possibili somme

in generale la complessità è polinomiale

n + (n-1) + (n-2) + ... + 1

*/

