Russo Lavinia 

es1
#include <iostream>
using namespace std;

int count_k(int* v, int p, int r, int k){ //complessitÃ  O(n)
	int q=(p+r)/2;
	
    if ((p > q)|| (p == q && v[p] != k))
        return 0;
 
    if (p == r && v[p] == k)
        return 1;

    return count_k(v, p, q, k)+count_k(v,1+q,r,k);

}


int main(void){
	
	int n_test;
	int k;
	int dim;
	int* v;
	
	cin>>n_test;
	
	for (int i=0; i<n_test; i++){
		cin>>k;
		cin>>dim;
		v=new int[dim];
		for(int j=0; j<dim; j++){
			cin>>v[j];
		}
		cout<<"CASO DI TEST "<<i+1<<endl;
		cout<<count_k(v, 0, dim-1,k)<<endl;;	
	}
	
	return 0;
}

es2

#include <iostream>
#include <bits/stdc++.h>

using namespace std;


bool Primo(int n){
    
      if(n == 1 || n == 0) return false;
      for(int j = 2; j < 100; j++){ 
        if(n % j == 0 && j!=n) return false;
      }
      return true;
}

int sequence_P_S (int sequence[], int P, int S){
	int dim_s=0;
	for(int i=P+1; i<S; i++){
		if(Primo(i)){
			sequence[dim_s]=i;
			dim_s++;
		}
	}
	for(int i=0; i<dim_s; i++){
		cout<<sequence[i]<<" ";
	}
	return dim_s;
}



void backtracking (int S, int N, int P, int sequence[], int somma, int l, int r){
	int k=0;
	if(l==r){
		for(int i=0; i<N; i++){
			somma=sequence[i];	
		}
		if(somma==S){
			for(int i=0; i<N; i++){
				cout<<sequence[i]<<" ";
			}
			return;
		}
		else somma=0;
		}
	}
	else{
		somma=0;
			for (int i = l; i <= N; i++) {

			swap(sequence[l], sequence[i]);

			backtracking(S, N, P, sequence, somma, l+1, r);

			swap(sequence[l], sequence[i]);
		}
	}	
}


int main(void){
	int S;
	int N; 
	int P;
	int n_test;
	int dim=0;
	
	cin>>n_test;
	for (int i=0; i<n_test; i++){
		cin>>S;
		cin>>N;
		cin>>P;
	}
	int* sequence=new int[S-P];
	dim=sequence_P_S(sequence, P, S);
	backtracking(S, N, P, sequence, 0, 0, dim-1);
	
	return 0;
}